#!/usr/bin/env python
#
import sys, os, re
from subprocess import check_output

# Collect the parameters
commit_msg_filepath = sys.argv[1]


with open(commit_msg_filepath, 'r+', encoding="UTF-8") as f:
	content = f.read()
	print(content)
	pattern = r'Jira-\d{4,6}(?!\d)'
	result = re.search(pattern, content)
	print(result)
	if result == None: 
		print("ERROR: No Jira-Id present or formatted incorrectly  Ex. format and range of Ids Jira-0000 to Jira-999999")
		sys.exit(1)

	length_of_msg = len(content)
	if length_of_msg > 100:
		print("ERROR: commit message is longer than 100 characters, current length is: %s"  % length_of_msg)
		sys.exit(1)









# An example hook script to check the commit log message.
# Called by "git commit" with one argument, the name of the file
# that has the commit message.  The hook should exit with non-zero
# status after issuing an appropriate message if it wants to stop the
# commit.  The hook is allowed to edit the commit message file.
#
# To enable this hook, rename this file to "commit-msg".

# Uncomment the below to add a Signed-off-by line to the message.
# Doing this in a hook is a bad idea in general, but the prepare-commit-msg
# hook is more suited to it.
#
# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\(.*>\).*$/Signed-off-by: \1/p')
# grep -qs "^$SOB" "$1" || echo "$SOB" >> "$1"

# This example catches duplicate Signed-off-by lines.


# test "" = "$(grep '^Signed-off-by: ' "$1" |
# 	 sort | uniq -c | sed -e '/^[ 	]*1[ 	]/d')" || {
# 	echo >&2 Duplicate Signed-off-by lines.
# 	exit 1
# }
